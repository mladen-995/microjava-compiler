package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}



terminal 
PROG, LBRACE, RBRACE, PLUS, RPAREN, CONST, SEMIC, COMMA, EQUAL, LSBRACE, RSBRACE, NEW, DIV, MINUS, PERC, VOID, LPAREN, MUL, READ, INC, PRINT, RETURN, DEC;

terminal Integer NUMBER;
terminal Character CHAR;
terminal String BOOLEAN;
terminal String IDENT;



nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, Prog_Name, Designator, Method_Decl, Const_Name, Method_Name, Designator_Call_Method;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Expr, Factor, Var_Decl_List, Const_Type, Add_op, Mul_op;




nonterminal 
Program_Decl_List, Program_Decl,
Const_Decl_Wrapper, Const_Decl_List, Const_Decl,
Var_Decl_Wrapper, Var_Decl,
Method_Return_Type,
Form_Pars_List,
Form_Pars_List_Exists,
Statement_List,
Statement,
Designator_Statement,
Act_Pars,
Method_Decl_List,
Var_Decl_Method,
Expr_Para,
Form_Param,
Act_Par,
Ar_Array,
Ar_Last,
Glob_Decl_Errors,
Var_Decl_Globl_Wrapper
;




Program ::= (Program) PROG Prog_Name:p Program_Decl_List LBRACE Method_Decl_List RBRACE ;

Prog_Name ::= (ProgName) IDENT:pName;

Program_Decl_List ::= 	(ProgramDeclList) Program_Decl_List Program_Decl
						|
						(NoProgramDeclList) /* epsilon */
						;

Program_Decl ::= 	(ProgramDeclConst) Const_Decl_Wrapper 
					| 
					(ProgramDeclVar) Var_Decl_Globl_Wrapper
					;


/*	KONSTANTE	*/
Const_Decl_Wrapper ::= (ConstDeclWrapper) CONST Type Const_Decl_List SEMIC;

Const_Decl_List ::= 	(ConstDeclListArray) Const_Decl_List COMMA Const_Decl
						|
						(ConstDeclList) Const_Decl
						;

Const_Decl ::= (ConstDecl) Const_Name EQUAL Const_Type;

Const_Name ::= (ConstName) IDENT;

Const_Type ::= 	(ConstTypeNumber) NUMBER 
				| 
				(ConstTypeChar) CHAR 
				| 
				(ConstTypeBoolean) BOOLEAN
				;


/*	PROMENLJIVE	*/
Var_Decl_Globl_Wrapper ::= 	(VarDeclWrapperGlob) Var_Decl_Wrapper
							|
							(VarDeclErrors) Glob_Decl_Errors
							;


Var_Decl_Wrapper ::= 	(VarDeclWrapper) Type Var_Decl_List SEMIC
						;
						
Glob_Decl_Errors ::= 	(VarDeclErrorComma) error COMMA
						{: 
							parser.log.debug("Uspesan oporavak od greske do , pri deklarisanju globalne promeljive");
						:}
						|
						(VarDeclErrorSemic) error SEMIC
						{: 
							parser.log.debug("Uspesan oporavak od greske do ; pri deklarisanju globalne promeljive");
						:}
						;
						

Var_Decl_List ::= 	(VarDeclListArray) Var_Decl_List COMMA Var_Decl
					|
					(VarDeclList) Var_Decl
					;

Var_Decl ::= 	(VarDecl) IDENT 
				|
				(VarDeclArray) IDENT LSBRACE RSBRACE
				;


Type ::= (Type) IDENT:typeName;


Method_Decl_List ::= 	(MethodDeclList) Method_Decl_List Method_Decl
						|
						(NoMethodDeclList) /* epsilon */
						;

Method_Decl ::= (MethodDecl) Method_Name LPAREN Form_Pars_List RPAREN Var_Decl_Method LBRACE Statement_List RBRACE;

Method_Name ::= (MethodName) Method_Return_Type IDENT;


Var_Decl_Method ::= 	(VarDeclMethod) Var_Decl_Method Var_Decl_Wrapper
						|
						(NoVarDeclMethod) /* epsilon */
						;


Method_Return_Type ::= 	(MethodReturnType) Type 
						| 
						(MethodReturnTypeVoid) VOID;

Form_Pars_List ::= 	(FormPars) Form_Pars_List_Exists
					|
					(NoFormParsList) /* epsilon */
					;

Form_Pars_List_Exists ::=	(FormParsListArray) Form_Pars_List_Exists COMMA Form_Param
							|
							(FormParsList) Form_Param
							;

Form_Param ::= (FormParam) Type Var_Decl;


Statement_List ::= 	(StatementList) Statement_List Statement
					|
					(NoStatementList) /* epsilon */
					;

Statement ::= 	(StatementDesignator) Designator_Statement SEMIC
				|
				(StatementReturn) RETURN SEMIC
				|
				(StatementReturnExpr) RETURN Expr SEMIC
				|
				(StatementPrint) PRINT LPAREN Expr RPAREN SEMIC 
				|
				(StatementRead) READ LPAREN Designator RPAREN SEMIC
				|
				(StatementPrintArray) PRINT LPAREN Expr COMMA NUMBER RPAREN SEMIC
				;



Designator_Statement ::= 	(DesignatorStatementEqual) Designator EQUAL Expr
							|
							(DesignatorStatementEqualError) Designator EQUAL error COMMA
							{: 
								parser.log.debug("Uspesan oporavak od greske do , pri dodeli vrednosti");
							:}
							|
							(StatementDesignatorParent) Designator_Call_Method LPAREN RPAREN
							|
							(StatementDesignatorParentActPars) Designator_Call_Method LPAREN Act_Pars RPAREN
							|
							(DesignatorStatementInc) Designator INC
							|
							(DesignatorStatementDec) Designator DEC
							;

Designator_Call_Method ::= (DesignatorCallMethod) Designator;

Act_Pars ::= 	(ActParsArray) Act_Pars COMMA Act_Par
				|
				(ActParsExpr) Act_Par
				;

Act_Par ::= (ActPar) Expr;



Factor ::= 	(FactorDesignator) Designator
			|
			(FactorDesignatorMeth) Designator_Call_Method LPAREN RPAREN
			|
			(FactorDesignatorPars) Designator_Call_Method LPAREN Act_Pars RPAREN
			|
			(Const) NUMBER
			|
			(Char) CHAR
			|
			(Bool) BOOLEAN
			|
			(NewType) NEW Type
			|
			(NewTypeBrace) NEW Type LSBRACE Expr RSBRACE
			|
			(ExprParen) LPAREN Expr RPAREN
			;

Term ::= 	(TermAdd) Term Mul_op Factor
			|
			(TermOne) Factor
			;


Expr ::=	(ExprMinus) MINUS Term Expr_Para
			|
			(ExprOne) Term Expr_Para
			;
				

Expr_Para ::=	(ExprPara) Add_op Term Expr_Para
				|
				(NoExprPara) /* epsilon */
				;



Designator ::= 	(DesignatorAdd) IDENT Ar_Array
				|
				(DesignatorIdent) IDENT
				;

Ar_Array ::= (ArArray) Ar_Last Expr RSBRACE;
Ar_Last ::= (ArLast) LSBRACE;



Add_op ::=	(AddOp) PLUS
			|
			(SubbOp) MINUS
			;

Mul_op ::=	(MulOp) MUL
			|
			(DivOp) DIV
			|
			(PercOp) PERC
			;





