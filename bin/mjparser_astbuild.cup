package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}



terminal 
PROG, LBRACE, RBRACE, PLUS, RPAREN, CONST, SEMIC, COMMA, EQUAL, LSBRACE, RSBRACE, NEW, DIV, MINUS, PERC, VOID, LPAREN, MUL, READ, INC, PRINT, RETURN, DEC;

terminal Integer NUMBER;
terminal Character CHAR;
terminal String BOOLEAN;
terminal String IDENT;



nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, Prog_Name, Designator, Method_Decl, Const_Name, Method_Name, Designator_Call_Method;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Expr, Factor, Var_Decl_List, Const_Type, Add_op, Mul_op;




nonterminal 
Program_Decl_List Program_Decl_List;
nonterminal Program_Decl Program_Decl;
nonterminal
Const_Decl_Wrapper Const_Decl_Wrapper;
nonterminal Const_Decl_List Const_Decl_List;
nonterminal Const_Decl Const_Decl;
nonterminal
Var_Decl_Wrapper Var_Decl_Wrapper;
nonterminal Var_Decl Var_Decl;
nonterminal
Method_Return_Type Method_Return_Type;
nonterminal
Form_Pars_List Form_Pars_List;
nonterminal
Form_Pars_List_Exists Form_Pars_List_Exists;
nonterminal
Statement_List Statement_List;
nonterminal
Statement Statement;
nonterminal
Designator_Statement Designator_Statement;
nonterminal
Act_Pars Act_Pars;
nonterminal
Method_Decl_List Method_Decl_List;
nonterminal
Var_Decl_Method Var_Decl_Method;
nonterminal
Expr_Para Expr_Para;
nonterminal
Form_Param Form_Param;
nonterminal
Act_Par Act_Par;
nonterminal
Ar_Array Ar_Array;
nonterminal
Ar_Last Ar_Last;
nonterminal
Glob_Decl_Errors Glob_Decl_Errors;
nonterminal
Var_Decl_Globl_Wrapper Var_Decl_Globl_Wrapper
;




Program ::= (Program) PROG Prog_Name:p Program_Decl_List:P1 LBRACE Method_Decl_List:M2 RBRACE {: RESULT=new Program(p, P1, M2); RESULT.setLine(pleft); :} ;

Prog_Name ::= (ProgName) IDENT:pName {: RESULT=new ProgName(pName); RESULT.setLine(pNameleft); :};

Program_Decl_List ::= 	(ProgramDeclList) Program_Decl_List:P1 Program_Decl:P2 {: RESULT=new ProgramDeclList(P1, P2); RESULT.setLine(P1left); :}
						|
						(NoProgramDeclList) {: RESULT=new NoProgramDeclList(); :} /* epsilon */
						;

Program_Decl ::= 	(ProgramDeclConst) Const_Decl_Wrapper:C1 {: RESULT=new ProgramDeclConst(C1); RESULT.setLine(C1left); :} 
					| 
					(ProgramDeclVar) Var_Decl_Globl_Wrapper:V1 {: RESULT=new ProgramDeclVar(V1); RESULT.setLine(V1left); :}
					;


/*	KONSTANTE	*/
Const_Decl_Wrapper ::= (ConstDeclWrapper) CONST Type:T1 Const_Decl_List:C2 SEMIC {: RESULT=new ConstDeclWrapper(T1, C2); RESULT.setLine(T1left); :};

Const_Decl_List ::= 	(ConstDeclListArray) Const_Decl_List:C1 COMMA Const_Decl:C2 {: RESULT=new ConstDeclListArray(C1, C2); RESULT.setLine(C1left); :}
						|
						(ConstDeclList) Const_Decl:C1 {: RESULT=new ConstDeclList(C1); RESULT.setLine(C1left); :}
						;

Const_Decl ::= (ConstDecl) Const_Name:C1 EQUAL Const_Type:C2 {: RESULT=new ConstDecl(C1, C2); RESULT.setLine(C1left); :};

Const_Name ::= (ConstName) IDENT:I1 {: RESULT=new ConstName(I1); RESULT.setLine(I1left); :};

Const_Type ::= 	(ConstTypeNumber) NUMBER:N1 {: RESULT=new ConstTypeNumber(N1); RESULT.setLine(N1left); :} 
				| 
				(ConstTypeChar) CHAR:C1 {: RESULT=new ConstTypeChar(C1); RESULT.setLine(C1left); :} 
				| 
				(ConstTypeBoolean) BOOLEAN:B1 {: RESULT=new ConstTypeBoolean(B1); RESULT.setLine(B1left); :}
				;


/*	PROMENLJIVE	*/
Var_Decl_Globl_Wrapper ::= 	(VarDeclWrapperGlob) Var_Decl_Wrapper:V1 {: RESULT=new VarDeclWrapperGlob(V1); RESULT.setLine(V1left); :}
							|
							(VarDeclErrors) Glob_Decl_Errors:G1 {: RESULT=new VarDeclErrors(G1); RESULT.setLine(G1left); :}
							;


Var_Decl_Wrapper ::= 	(VarDeclWrapper) Type:T1 Var_Decl_List:V2 SEMIC {: RESULT=new VarDeclWrapper(T1, V2); RESULT.setLine(T1left); :}
						;
						
Glob_Decl_Errors ::= 	(VarDeclErrorComma) error COMMA
						{: 
							parser.log.debug("Uspesan oporavak od greske do , pri deklarisanju globalne promeljive");
						:} {: RESULT=new VarDeclErrorComma(); :}
						|
						(VarDeclErrorSemic) error SEMIC
						{: 
							parser.log.debug("Uspesan oporavak od greske do ; pri deklarisanju globalne promeljive");
						:} {: RESULT=new VarDeclErrorSemic(); :}
						;
						

Var_Decl_List ::= 	(VarDeclListArray) Var_Decl_List:V1 COMMA Var_Decl:V2 {: RESULT=new VarDeclListArray(V1, V2); RESULT.setLine(V1left); :}
					|
					(VarDeclList) Var_Decl:V1 {: RESULT=new VarDeclList(V1); RESULT.setLine(V1left); :}
					;

Var_Decl ::= 	(VarDecl) IDENT:I1 {: RESULT=new VarDecl(I1); RESULT.setLine(I1left); :} 
				|
				(VarDeclArray) IDENT:I1 LSBRACE RSBRACE {: RESULT=new VarDeclArray(I1); RESULT.setLine(I1left); :}
				;


Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};


Method_Decl_List ::= 	(MethodDeclList) Method_Decl_List:M1 Method_Decl:M2 {: RESULT=new MethodDeclList(M1, M2); RESULT.setLine(M1left); :}
						|
						(NoMethodDeclList) {: RESULT=new NoMethodDeclList(); :} /* epsilon */
						;

Method_Decl ::= (MethodDecl) Method_Name:M1 LPAREN Form_Pars_List:F2 RPAREN Var_Decl_Method:V3 LBRACE Statement_List:S4 RBRACE {: RESULT=new MethodDecl(M1, F2, V3, S4); RESULT.setLine(M1left); :};

Method_Name ::= (MethodName) Method_Return_Type:M1 IDENT:I2 {: RESULT=new MethodName(M1, I2); RESULT.setLine(M1left); :};


Var_Decl_Method ::= 	(VarDeclMethod) Var_Decl_Method:V1 Var_Decl_Wrapper:V2 {: RESULT=new VarDeclMethod(V1, V2); RESULT.setLine(V1left); :}
						|
						(NoVarDeclMethod) {: RESULT=new NoVarDeclMethod(); :} /* epsilon */
						;


Method_Return_Type ::= 	(MethodReturnType) Type:T1 {: RESULT=new MethodReturnType(T1); RESULT.setLine(T1left); :} 
						| 
						(MethodReturnTypeVoid) VOID {: RESULT=new MethodReturnTypeVoid(); :};

Form_Pars_List ::= 	(FormPars) Form_Pars_List_Exists:F1 {: RESULT=new FormPars(F1); RESULT.setLine(F1left); :}
					|
					(NoFormParsList) {: RESULT=new NoFormParsList(); :} /* epsilon */
					;

Form_Pars_List_Exists ::=	(FormParsListArray) Form_Pars_List_Exists:F1 COMMA Form_Param:F2 {: RESULT=new FormParsListArray(F1, F2); RESULT.setLine(F1left); :}
							|
							(FormParsList) Form_Param:F1 {: RESULT=new FormParsList(F1); RESULT.setLine(F1left); :}
							;

Form_Param ::= (FormParam) Type:T1 Var_Decl:V2 {: RESULT=new FormParam(T1, V2); RESULT.setLine(T1left); :};


Statement_List ::= 	(StatementList) Statement_List:S1 Statement:S2 {: RESULT=new StatementList(S1, S2); RESULT.setLine(S1left); :}
					|
					(NoStatementList) {: RESULT=new NoStatementList(); :} /* epsilon */
					;

Statement ::= 	(StatementDesignator) Designator_Statement:D1 SEMIC {: RESULT=new StatementDesignator(D1); RESULT.setLine(D1left); :}
				|
				(StatementReturn) RETURN SEMIC {: RESULT=new StatementReturn(); :}
				|
				(StatementReturnExpr) RETURN Expr:E1 SEMIC {: RESULT=new StatementReturnExpr(E1); RESULT.setLine(E1left); :}
				|
				(StatementPrint) PRINT LPAREN Expr:E1 RPAREN SEMIC {: RESULT=new StatementPrint(E1); RESULT.setLine(E1left); :} 
				|
				(StatementRead) READ LPAREN Designator:D1 RPAREN SEMIC {: RESULT=new StatementRead(D1); RESULT.setLine(D1left); :}
				|
				(StatementPrintArray) PRINT LPAREN Expr:E1 COMMA NUMBER:N2 RPAREN SEMIC {: RESULT=new StatementPrintArray(E1, N2); RESULT.setLine(E1left); :}
				;



Designator_Statement ::= 	(DesignatorStatementEqual) Designator:D1 EQUAL Expr:E2 {: RESULT=new DesignatorStatementEqual(D1, E2); RESULT.setLine(D1left); :}
							|
							(DesignatorStatementEqualError) Designator:D1 EQUAL error COMMA
							{: 
								parser.log.debug("Uspesan oporavak od greske do , pri dodeli vrednosti");
							:} {: RESULT=new DesignatorStatementEqualError(D1); RESULT.setLine(D1left); :}
							|
							(StatementDesignatorParent) Designator_Call_Method:D1 LPAREN RPAREN {: RESULT=new StatementDesignatorParent(D1); RESULT.setLine(D1left); :}
							|
							(StatementDesignatorParentActPars) Designator_Call_Method:D1 LPAREN Act_Pars:A2 RPAREN {: RESULT=new StatementDesignatorParentActPars(D1, A2); RESULT.setLine(D1left); :}
							|
							(DesignatorStatementInc) Designator:D1 INC {: RESULT=new DesignatorStatementInc(D1); RESULT.setLine(D1left); :}
							|
							(DesignatorStatementDec) Designator:D1 DEC {: RESULT=new DesignatorStatementDec(D1); RESULT.setLine(D1left); :}
							;

Designator_Call_Method ::= (DesignatorCallMethod) Designator:D1 {: RESULT=new DesignatorCallMethod(D1); RESULT.setLine(D1left); :};

Act_Pars ::= 	(ActParsArray) Act_Pars:A1 COMMA Act_Par:A2 {: RESULT=new ActParsArray(A1, A2); RESULT.setLine(A1left); :}
				|
				(ActParsExpr) Act_Par:A1 {: RESULT=new ActParsExpr(A1); RESULT.setLine(A1left); :}
				;

Act_Par ::= (ActPar) Expr:E1 {: RESULT=new ActPar(E1); RESULT.setLine(E1left); :};



Factor ::= 	(FactorDesignator) Designator:D1 {: RESULT=new FactorDesignator(D1); RESULT.setLine(D1left); :}
			|
			(FactorDesignatorMeth) Designator_Call_Method:D1 LPAREN RPAREN {: RESULT=new FactorDesignatorMeth(D1); RESULT.setLine(D1left); :}
			|
			(FactorDesignatorPars) Designator_Call_Method:D1 LPAREN Act_Pars:A2 RPAREN {: RESULT=new FactorDesignatorPars(D1, A2); RESULT.setLine(D1left); :}
			|
			(Const) NUMBER:N1 {: RESULT=new Const(N1); RESULT.setLine(N1left); :}
			|
			(Char) CHAR:C1 {: RESULT=new Char(C1); RESULT.setLine(C1left); :}
			|
			(Bool) BOOLEAN:B1 {: RESULT=new Bool(B1); RESULT.setLine(B1left); :}
			|
			(NewType) NEW Type:T1 {: RESULT=new NewType(T1); RESULT.setLine(T1left); :}
			|
			(NewTypeBrace) NEW Type:T1 LSBRACE Expr:E2 RSBRACE {: RESULT=new NewTypeBrace(T1, E2); RESULT.setLine(T1left); :}
			|
			(ExprParen) LPAREN Expr:E1 RPAREN {: RESULT=new ExprParen(E1); RESULT.setLine(E1left); :}
			;

Term ::= 	(TermAdd) Term:T1 Mul_op:M2 Factor:F3 {: RESULT=new TermAdd(T1, M2, F3); RESULT.setLine(T1left); :}
			|
			(TermOne) Factor:F1 {: RESULT=new TermOne(F1); RESULT.setLine(F1left); :}
			;


Expr ::=	(ExprMinus) MINUS Term:T1 Expr_Para:E2 {: RESULT=new ExprMinus(T1, E2); RESULT.setLine(T1left); :}
			|
			(ExprOne) Term:T1 Expr_Para:E2 {: RESULT=new ExprOne(T1, E2); RESULT.setLine(T1left); :}
			;
				

Expr_Para ::=	(ExprPara) Add_op:A1 Term:T2 Expr_Para:E3 {: RESULT=new ExprPara(A1, T2, E3); RESULT.setLine(A1left); :}
				|
				(NoExprPara) {: RESULT=new NoExprPara(); :} /* epsilon */
				;



Designator ::= 	(DesignatorAdd) IDENT:I1 Ar_Array:A2 {: RESULT=new DesignatorAdd(I1, A2); RESULT.setLine(I1left); :}
				|
				(DesignatorIdent) IDENT:I1 {: RESULT=new DesignatorIdent(I1); RESULT.setLine(I1left); :}
				;

Ar_Array ::= (ArArray) Ar_Last:A1 Expr:E2 RSBRACE {: RESULT=new ArArray(A1, E2); RESULT.setLine(A1left); :};
Ar_Last ::= (ArLast) LSBRACE {: RESULT=new ArLast(); :};



Add_op ::=	(AddOp) PLUS {: RESULT=new AddOp(); :}
			|
			(SubbOp) MINUS {: RESULT=new SubbOp(); :}
			;

Mul_op ::=	(MulOp) MUL {: RESULT=new MulOp(); :}
			|
			(DivOp) DIV {: RESULT=new DivOp(); :}
			|
			(PercOp) PERC {: RESULT=new PercOp(); :}
			;





