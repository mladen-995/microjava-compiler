package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}



terminal 
PROG, IDENT, LBRACE, RBRACE, PLUS, RPAREN, ELSE, IF, CONST, SEMIC, COMMA, EQUAL, NUMBER, CHAR, LSBRACE, RSBRACE, BOOLEAN, EXTENDS, NEW, LESS_OR_EQUAL, DOT, DIV, MINUS, PERC, VOID, AND, LPAREN, LESS, MUL, IS_EQUAL, BREAK, IS_NOT_EQUAL, READ, HIGHER, INC, WHILE, PRINT, DO, CLASS, RETURN, CONTINUE, OR, HIGHER_OR_EQUAL, DEC;

nonterminal 
Program Program;
nonterminal ProgramDeclList ProgramDeclList;
nonterminal ProgramDecl ProgramDecl;
nonterminal
ConstDeclWrapper ConstDeclWrapper;
nonterminal ConstDeclList ConstDeclList;
nonterminal ConstDecl ConstDecl;
nonterminal ConstType ConstType;
nonterminal
VarDeclWrapper VarDeclWrapper;
nonterminal VarDeclList VarDeclList;
nonterminal VarDecl VarDecl;
nonterminal
Type Type;
nonterminal
MethodDecl MethodDecl;
nonterminal
MethodReturnType MethodReturnType;
nonterminal
FormParsList FormParsList;
nonterminal
StatementList StatementList;
nonterminal
Statement Statement;
nonterminal
DesignatorStatement DesignatorStatement;
nonterminal
ActPars ActPars;
nonterminal
Condition Condition;
nonterminal
CondTerm CondTerm;
nonterminal
CondFact CondFact;
nonterminal
Factor Factor;
nonterminal
Term Term;
nonterminal
Expr Expr;
nonterminal
Designator Designator;
nonterminal
Relop Relop;
nonterminal
Addop Addop;
nonterminal
Mulop Mulop;
nonterminal
MethodDeclList MethodDeclList
;




Program ::= PROG IDENT ProgramDeclList:P1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new ProgramDerived1(P1, M2); RESULT.setLine(P1left); :} ;

ProgramDeclList ::= ProgramDeclList:P1 ProgramDecl:P2 {: RESULT=new ProgramDeclListDerived1(P1, P2); RESULT.setLine(P1left); :}
					| {: RESULT=new ProgramDeclListDerived2(); :}
					/* epsilon */
					;

ProgramDecl ::= ConstDeclWrapper:C1 {: RESULT=new ProgramDeclDerived1(C1); RESULT.setLine(C1left); :} | VarDeclWrapper:V1 {: RESULT=new ProgramDeclDerived2(V1); RESULT.setLine(V1left); :};


/*	KONSTANTE	*/
ConstDeclWrapper ::= CONST Type:T1 ConstDeclList:C2 SEMIC {: RESULT=new ConstDeclWrapperDerived1(T1, C2); RESULT.setLine(T1left); :};

ConstDeclList ::= 	ConstDeclList:C1 COMMA ConstDecl:C2 {: RESULT=new ConstDeclListDerived1(C1, C2); RESULT.setLine(C1left); :}
					|
					ConstDecl:C1 {: RESULT=new ConstDeclListDerived2(C1); RESULT.setLine(C1left); :};

ConstDecl ::= IDENT EQUAL ConstType:C1 {: RESULT=new ConstDeclDerived1(C1); RESULT.setLine(C1left); :};

ConstType ::= NUMBER {: RESULT=new ConstTypeDerived1(); :} | CHAR {: RESULT=new ConstTypeDerived2(); :} | BOOLEAN {: RESULT=new ConstTypeDerived3(); :};


/*	PROMENLJIVE	*/
VarDeclWrapper ::= 	Type:T1 VarDeclList:V2 SEMIC {: RESULT=new VarDeclWrapperDerived1(T1, V2); RESULT.setLine(T1left); :};

VarDeclList ::= VarDeclList:V1 COMMA VarDecl:V2 {: RESULT=new VarDeclListDerived1(V1, V2); RESULT.setLine(V1left); :}
				|
				VarDecl:V1 {: RESULT=new VarDeclListDerived2(V1); RESULT.setLine(V1left); :}
				;

VarDecl ::= IDENT {: RESULT=new VarDeclDerived1(); :} 
			|
			IDENT LSBRACE RSBRACE {: RESULT=new VarDeclDerived2(); :}
			;


Type ::= IDENT {: RESULT=new TypeDerived1(); :};


MethodDeclList ::= 	MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclListDerived1(M1, M2); RESULT.setLine(M1left); :}
					| {: RESULT=new MethodDeclListDerived2(); :}
					/* epsilon */
					;

MethodDecl ::= MethodReturnType:M1 IDENT LPAREN FormParsList:F2 RPAREN VarDeclWrapper:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDeclDerived1(M1, F2, V3, S4); RESULT.setLine(M1left); :};

MethodReturnType ::= Type:T1 {: RESULT=new MethodReturnTypeDerived1(T1); RESULT.setLine(T1left); :} | VOID {: RESULT=new MethodReturnTypeDerived2(); :};

FormParsList ::= 	FormParsList:F1 COMMA Type:T2 VarDecl:V3 {: RESULT=new FormParsListDerived1(F1, T2, V3); RESULT.setLine(F1left); :}
					|
					Type:T1 VarDecl:V2 {: RESULT=new FormParsListDerived2(T1, V2); RESULT.setLine(T1left); :} 
					| {: RESULT=new FormParsListDerived3(); :}
					/* epsilon */
					;


StatementList ::= 	StatementList:S1 Statement:S2 {: RESULT=new StatementListDerived1(S1, S2); RESULT.setLine(S1left); :}
					| {: RESULT=new StatementListDerived2(); :}
					/* epsilon */
					;

Statement ::= 	DesignatorStatement:D1 SEMIC {: RESULT=new StatementDerived1(D1); RESULT.setLine(D1left); :}
				|
				IF LPAREN Condition:C1 RPAREN Statement:S2 {: RESULT=new StatementDerived2(C1, S2); RESULT.setLine(C1left); :}
				|
				DO Statement:S1 WHILE LPAREN Condition:C2 RPAREN SEMIC {: RESULT=new StatementDerived3(S1, C2); RESULT.setLine(S1left); :}
				|
				BREAK SEMIC {: RESULT=new StatementDerived4(); :}
				|
				CONTINUE SEMIC {: RESULT=new StatementDerived5(); :}
				|
				RETURN SEMIC {: RESULT=new StatementDerived6(); :}
				|
				RETURN Expr:E1 SEMIC {: RESULT=new StatementDerived7(E1); RESULT.setLine(E1left); :}
				|
				READ LPAREN Designator:D1 RPAREN SEMIC {: RESULT=new StatementDerived8(D1); RESULT.setLine(D1left); :}
				|
				PRINT LPAREN Expr:E1 RPAREN SEMIC {: RESULT=new StatementDerived9(E1); RESULT.setLine(E1left); :} 
				|
				PRINT LPAREN Expr:E1 COMMA NUMBER RPAREN SEMIC {: RESULT=new StatementDerived10(E1); RESULT.setLine(E1left); :}
				|
				LBRACE Statement:S1 RBRACE {: RESULT=new StatementDerived11(S1); RESULT.setLine(S1left); :}
				;



DesignatorStatement ::= Designator:D1 EQUAL Expr:E2 {: RESULT=new DesignatorStatementDerived1(D1, E2); RESULT.setLine(D1left); :}
						|
						Designator:D1 LPAREN ActPars:A2 RPAREN {: RESULT=new DesignatorStatementDerived2(D1, A2); RESULT.setLine(D1left); :}
						|
						Designator:D1 INC {: RESULT=new DesignatorStatementDerived3(D1); RESULT.setLine(D1left); :}
						|
						Designator:D1 DEC {: RESULT=new DesignatorStatementDerived4(D1); RESULT.setLine(D1left); :}
						;

ActPars ::= ActPars:A1 COMMA Expr:E2 {: RESULT=new ActParsDerived1(A1, E2); RESULT.setLine(A1left); :}
			|
			Expr:E1 {: RESULT=new ActParsDerived2(E1); RESULT.setLine(E1left); :}
			;

Condition ::=	Condition:C1 OR CondTerm:C2 {: RESULT=new ConditionDerived1(C1, C2); RESULT.setLine(C1left); :}
				|
				CondTerm:C1 {: RESULT=new ConditionDerived2(C1); RESULT.setLine(C1left); :}
				;

CondTerm ::=	CondTerm:C1 AND CondFact:C2 {: RESULT=new CondTermDerived1(C1, C2); RESULT.setLine(C1left); :}
				|
				CondFact:C1 {: RESULT=new CondTermDerived2(C1); RESULT.setLine(C1left); :}
				;

CondFact ::=	Expr:E1 {: RESULT=new CondFactDerived1(E1); RESULT.setLine(E1left); :}
				|
				Expr:E1 Relop:R2 Expr:E3 {: RESULT=new CondFactDerived2(E1, R2, E3); RESULT.setLine(E1left); :}
				;





Factor ::= 	Designator:D1 {: RESULT=new FactorDerived1(D1); RESULT.setLine(D1left); :}
			|
			Designator:D1 LPAREN ActPars:A2 RPAREN {: RESULT=new FactorDerived2(D1, A2); RESULT.setLine(D1left); :}
			|
			NUMBER {: RESULT=new FactorDerived3(); :}
			|
			CHAR {: RESULT=new FactorDerived4(); :}
			|
			BOOLEAN {: RESULT=new FactorDerived5(); :}
			|
			NEW Type:T1 {: RESULT=new FactorDerived6(T1); RESULT.setLine(T1left); :}
			|
			NEW Type:T1 LSBRACE Expr:E2 RSBRACE {: RESULT=new FactorDerived7(T1, E2); RESULT.setLine(T1left); :}
			|
			LPAREN Expr:E1 RPAREN {: RESULT=new FactorDerived8(E1); RESULT.setLine(E1left); :}
			;

Term ::= 	Term:T1 Mulop:M2 Factor:F3 {: RESULT=new TermDerived1(T1, M2, F3); RESULT.setLine(T1left); :}
			|
			Factor:F1 {: RESULT=new TermDerived2(F1); RESULT.setLine(F1left); :}
			;


Expr ::= 	Expr:E1 Addop:A2 Term:T3 {: RESULT=new ExprDerived1(E1, A2, T3); RESULT.setLine(E1left); :}
			|
			MINUS Term:T1 {: RESULT=new ExprDerived2(T1); RESULT.setLine(T1left); :} 
			|
			Term:T1 {: RESULT=new ExprDerived3(T1); RESULT.setLine(T1left); :}
			;



Designator ::= 	Designator:D1 LSBRACE Expr:E2 RSBRACE {: RESULT=new DesignatorDerived1(D1, E2); RESULT.setLine(D1left); :}
				|
				Designator:D1 DOT IDENT {: RESULT=new DesignatorDerived2(D1); RESULT.setLine(D1left); :}
				|
				IDENT {: RESULT=new DesignatorDerived3(); :}
				;


Relop ::=	EQUAL {: RESULT=new RelopDerived1(); :}
			|
			IS_NOT_EQUAL {: RESULT=new RelopDerived2(); :}
			|
			HIGHER {: RESULT=new RelopDerived3(); :}
			|
			HIGHER_OR_EQUAL {: RESULT=new RelopDerived4(); :}
			|
			LESS {: RESULT=new RelopDerived5(); :}
			|
			LESS_OR_EQUAL {: RESULT=new RelopDerived6(); :}
			;	

Addop ::=	PLUS {: RESULT=new AddopDerived1(); :}
			|
			MINUS {: RESULT=new AddopDerived2(); :}
			;

Mulop ::=	MUL {: RESULT=new MulopDerived1(); :}
			|
			DIV {: RESULT=new MulopDerived2(); :}
			|
			PERC {: RESULT=new MulopDerived3(); :}
			;





