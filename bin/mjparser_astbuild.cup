package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}



terminal 
PROG, IDENT, LBRACE, RBRACE, PLUS, RPAREN, ELSE, IF, CONST, SEMIC, COMMA, EQUAL, NUMBER, CHAR, LSBRACE, RSBRACE, BOOLEAN, EXTENDS, NEW, LESS_OR_EQUAL, DOT, DIV, MINUS, PERC, VOID, AND, LPAREN, LESS, MUL, IS_EQUAL, BREAK, IS_NOT_EQUAL, READ, HIGHER, INC, WHILE, PRINT, DO, CLASS, RETURN, CONTINUE, OR, HIGHER_OR_EQUAL, DEC;

nonterminal 
Program Program;
nonterminal ProgramDeclList ProgramDeclList;
nonterminal ProgramDecl ProgramDecl;
nonterminal
ConstDeclWrapper ConstDeclWrapper;
nonterminal ConstDeclList ConstDeclList;
nonterminal ConstDecl ConstDecl;
nonterminal ConstType ConstType;
nonterminal
VarDeclWrapper VarDeclWrapper;
nonterminal VarDeclList VarDeclList;
nonterminal VarDecl VarDecl;
nonterminal
Type Type
;


Program ::= PROG IDENT ProgramDeclList:P1 LBRACE RBRACE {: RESULT=new ProgramDerived1(P1); RESULT.setLine(P1left); :} ;

ProgramDeclList ::= ProgramDeclList:P1 ProgramDecl:P2 {: RESULT=new ProgramDeclListDerived1(P1, P2); RESULT.setLine(P1left); :}
					| {: RESULT=new ProgramDeclListDerived2(); :}
					/* epsilon */
					;

ProgramDecl ::= ConstDeclWrapper:C1 {: RESULT=new ProgramDeclDerived1(C1); RESULT.setLine(C1left); :} | VarDeclWrapper:V1 {: RESULT=new ProgramDeclDerived2(V1); RESULT.setLine(V1left); :};


/*	KONSTANTE	*/
ConstDeclWrapper ::= CONST Type:T1 ConstDeclList:C2 SEMIC {: RESULT=new ConstDeclWrapperDerived1(T1, C2); RESULT.setLine(T1left); :};

ConstDeclList ::= 	ConstDeclList:C1 COMMA ConstDecl:C2 {: RESULT=new ConstDeclListDerived1(C1, C2); RESULT.setLine(C1left); :}
					|
					ConstDecl:C1 {: RESULT=new ConstDeclListDerived2(C1); RESULT.setLine(C1left); :};

ConstDecl ::= IDENT EQUAL ConstType:C1 {: RESULT=new ConstDeclDerived1(C1); RESULT.setLine(C1left); :};

ConstType ::= NUMBER {: RESULT=new ConstTypeDerived1(); :} | CHAR {: RESULT=new ConstTypeDerived2(); :} | BOOLEAN {: RESULT=new ConstTypeDerived3(); :};


/*	PROMENLJIVE	*/
VarDeclWrapper ::= Type:T1 VarDeclList:V2 SEMIC {: RESULT=new VarDeclWrapperDerived1(T1, V2); RESULT.setLine(T1left); :};

VarDeclList ::= VarDeclList:V1 COMMA VarDecl:V2 {: RESULT=new VarDeclListDerived1(V1, V2); RESULT.setLine(V1left); :}
				|
				VarDecl:V1 {: RESULT=new VarDeclListDerived2(V1); RESULT.setLine(V1left); :};

VarDecl ::= IDENT {: RESULT=new VarDeclDerived1(); :} 
			|
			IDENT LSBRACE RSBRACE {: RESULT=new VarDeclDerived2(); :};


Type ::= IDENT {: RESULT=new TypeDerived1(); :};





